/*
 * -------------------------------------------------
 *  nf-core/clipseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  // Workflow flags
  input = null
  genome = null
  fai = null
  smrna_org = null
  save_index = false
  outdir = './results'
  publish_dir_mode = 'copy'
  trimming = null

  // Boilerplate options
  multiqc_config = null
  email = null
  email_on_fail = null
  max_multiqc_email_size = '25.MB'
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = [:]
  config_profile_name = null
  config_profile_description = null
  config_profile_contact = null
  config_profile_url = null
  validate_params = true
  show_hidden_params = false
  schema_ignore_params = 'genomes,smrna'

  // Adapter options
  params.adapter = "AGATCGGAAGAGC"

  // UMI options
  params.move_umi = false
  params.deduplicate = true

  // Peak calling default params
  peakcaller = null
  segment = false
  // iCount
  half_window = 3
  merge_window = 3
  // Paraclu
  min_value = 10
  min_density_increase = 2
  max_cluster_length = 200
  // PureCLIP
  pureclip_iv = 'all'
  pureclip_bc = 0
  pureclip_dm = 8
  // Piranha
  bin_size_both = 3
  cluster_dist = 3

  // Motif calling
  motif = false
  motif_sample = 1000

  // Defaults only, expecting to be overwritten
  max_memory = '128.GB'
  max_cpus = 16
  max_time = '240.h'
}

// Container slug.
process.container = 'nfcore/clipseq:1.0.0'

profiles {
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    singularity.autoMounts = true
  }

  test      { includeConfig 'conf/test.config'      }
  nuig      { includeConfig 'conf/nuig.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
